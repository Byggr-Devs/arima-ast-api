datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Designation {
    SERVICEMANAGER
    TECHNICIAN
    FLOORMANAGER
}

enum Department {
    ENGINEERING
    MANAGEMENT
}

enum UserClass {
    ADMIN
    USER
}

model User {
    id          String      @id @default(uuid())
    fullName    String?
    employeeId  String      @unique
    designation Designation
    department  Department
    location    String?
    userClass   UserClass
    phone       String?
    email       String      @unique
    username    String      @unique
    password    String

    serviceCenters ServiceCenter[]

    @@map("users")
}

model ServiceCenter {
    id            String   @id @default(uuid())
    name          String
    city          String
    pincode       String
    state         String
    zone          String
    country       String
    vehicleModels String[]

    stages       ServiceCenterStage[]
    serviceTypes ServiceType[]
    alerts       ServiceCenterAlert[]
    users        User[]
}

model Stage {
    id   String @id @default(uuid())
    name String

    serviceCenters ServiceCenterStage[]
}

model ServiceCenterStage {
    serviceCenterId String
    serviceCenter   ServiceCenter @relation(fields: [serviceCenterId], references: [id])
    stageId         String
    stage           Stage         @relation(fields: [stageId], references: [id])

    @@id([serviceCenterId, stageId])
}

model ServiceType {
    serviceCenterId   String @id
    name String

    serviceCenter   ServiceCenter @relation(fields: [serviceCenterId], references: [id])
    jobRegistrations JobRegistrationServiceType[]
}

model Alert {
    id   String @id @default(uuid())
    name String

    serviceCenters ServiceCenterAlert[]
}

model ServiceCenterAlert {
    serviceCenterId String
    serviceCenter   ServiceCenter @relation(fields: [serviceCenterId], references: [id])
    alertId         String
    alert           Alert         @relation(fields: [alertId], references: [id])

    @@id([serviceCenterId, alertId])
}

enum JobStageStatus {
    WAITING
    IN_PROGRESS
    COMPLETED
}

enum Priority {
    LOW
    MEDIUM
    HIGH
    URGENT
}

model JobRegistration {
    id                         String         @id @default(uuid())
    serviceCenterId            String
    ownerName                  String
    vehicleModel               String
    vehicleNumber              String
    ownerPhone                 String
    extraServiceRequired       Boolean
    extraServiceTimeEstimate   String?
    estimatedDeliveryTimestamp DateTime?
    priority                   Priority       @default(LOW)
    startTimestamp             DateTime?
    endTimestamp               DateTime?
    waitingStageStatus         JobStageStatus @default(WAITING)
    stageOneStatus             JobStageStatus @default(WAITING)
    stageTwoStatus             JobStageStatus @default(WAITING)
    stageThreeStatus           JobStageStatus @default(WAITING)
    waterWashStageStatus       JobStageStatus @default(WAITING)

    serviceTypes JobRegistrationServiceType[]
    jobTracking  JobTracking[]
}

model JobRegistrationServiceType {
    jobRegistrationId String
    jobRegistration   JobRegistration @relation(fields: [jobRegistrationId], references: [id])
    serviceTypeId     String
    serviceType       ServiceType     @relation(fields: [serviceTypeId], references: [serviceCenterId])

    @@id([jobRegistrationId, serviceTypeId])
}

model JobTracking {
    id                String   @id @default(uuid())
    jobId             String
    cameraId          String
    detectedTimestamp DateTime
    detectedImageUrl  String

    job    JobRegistration @relation(fields: [jobId], references: [id])
    camera Camera          @relation(fields: [cameraId], references: [id])
}

model Camera {
    id          String        @id @default(uuid())
    name        String
    ip          String
    port        String
    username    String
    password    String
    url         String
    jobTracking JobTracking[]
}
